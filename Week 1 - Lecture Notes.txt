> x <- 1L
# 	L makes the number an Integer

Inf	# Infinity

NaN	# Not a Number

c	# Concatenate - link (things) together in a chain or series:

> x <- vector("numeric", length = 10)
> x
[1] 	0 0 0 0 0 0 0 0 0 0

- - - -

> class(x)
[1] 	"numeric"
> as.logical(x)
[1] 	FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> as.character(x)
[1] 	"0" "0" "0" "0" "0" "0" "0" "0" "0" "0"

#	as.xx = converts (coerced) from one class to another

- - - -

# Lists
> x <- list(1, "a", TRUE, 1+4i)
> x
[[1]]
[1] 1

[[2]]
[1] "a"

[[3]]
[1] TRUE

[[4]]
[1] 1+4i

- - - - - - - - - - - - - - - - - - - -
Video 2-7 - Data Types - Matricies 

# Matrices - vectors with a dimension attribute (rows / columns)

> m <- matrix(nrow=2, ncol=3)
> m
     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA
#	Establishes a 2x3 matrix

> dim(m)
[1] 2 3
> attributes(m)
$dim
[1] 2 3


> m <- matrix(1:6, nrow=2, ncol=3)
> m
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

- - - -

# 	Creating directly from vectors by adding a DIM attribute
> m <- 1:10
> m
 [1]  1  2  3  4  5  6  7  8  9 10
> dim(m) <- c(2,5)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10

- - - -

#	CBIND / RBIND	Column and Row Binding
> x <- 1:3
> y <- 10:12
> cbind(x,y)
     x  y
[1,] 1 10
[2,] 2 11
[3,] 3 12
> rbind (x,y)
  [,1] [,2] [,3]
x    1    2    3
y   10   11   12

- - - - - - - - - - - - - - - - - - - -
Video 2-8 - Data Types - Factors

> x <- factor(c("yes", "yes", "no", "yes", "no"))
> x
[1] yes yes no  yes no 
Levels: no yes
#	LEVELS = automatically created the common values (no / yes)

> table(x)
x
 no yes 
  2   3 

> unclass(x)
[1] 2 2 1 2 1
attr(,"levels")
[1] "no"  "yes"
 
- - - -

#	Uses levels command to set the order

> x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
> x
[1] yes yes no  yes no 
Levels: yes no

- - - - - - - - - - - - - - - - - - - -
Video 2-9 - Data Types - Missing Values - is.na // is.nan

> x <- c(1,2,NA,10,3)
> is.na(x)
[1] FALSE FALSE  TRUE FALSE FALSE
#	third value is true (yes)

> is.nan(x)
[1] FALSE FALSE FALSE FALSE FALSE
#	none are NaN

> x <- c(1,2,NaN, NA, 4)
> is.na(x)
[1] FALSE FALSE  TRUE  TRUE FALSE
#	now third and fourth are True (yes)

> is.nan(x)
[1] FALSE FALSE  TRUE FALSE FALSE
#	but only third is NaN

- - - - - - - - - - - - - - - - - - - -
Video 2-10 - Data Types - Data Frames

> x <- data.frame(foo=1:4, bar=c(T,T,F,F))
> x
  foo   bar
1   1  TRUE
2   2  TRUE
3   3 FALSE
4   4 FALSE

> nrow(x)
[1] 4

> ncol(x)
[1] 2


- - - - - - - - - - - - - - - - - - - -
Video 2-11 - Data Types - Name Attributes

> x <- 1:3
> names(x)
NULL

> names(x) <- c("foo", "bar", "norf")

> x
 foo  bar norf 
   1    2    3 

> names(x)
[1] "foo"  "bar"  "norf"

- - - - - -

#	LISTS can also have names

> x <- list(a=1, b=2, c=3)
> x
$a
[1] 1

$b
[1] 2

$c
[1] 3


# MATRIX's can have names too...
> m <- matrix(1:4, nrow=2, ncol=2)
> dimnames(m) <- list(c("a", "b"), c("c","d"))
> m
  c d
a 1 3
b 2 4
 

- - - - - - - - - - - - - - - - - - - -
Video 2-12 - Data Types - Summary



- - - - - - - - - - - - - - - - - - - -
Video 2-13 - Reading tabular data

pdf = page 19


- - - - - - - - - - - - - - - - - - - -
Video 2-14 - Reading large tables

pdf = page 19


- - - - - - - - - - - - - - - - - - - -
Video 2-15 - Textual Data Formats

pdf = page 19

> y <- data.frame(a=1, b="a")
> dput(y)
structure(list(a = 1, b = structure(1L, .Label = "a", class = "factor")), .Names = c("a", 
"b"), row.names = c(NA, -1L), class = "data.frame")

> dput(y, file = "y.R")
#	saves y to file "y.r"

> new.y <- dget("y.R")
#	loades file "y.r" as a new variable 'new.y'

> new.y
  a b
1 1 a

- - - - - - - - - - - - - - - - - - - -
Video 2-16 - Connections - Interfaces to the outside world

pdf = page 20

- - - - - - - - - - - - - - - - - - - -
Video 2-17 - Subsetting - Basics

> x <- c("a", "b", "c", "c", "d", "a")
>  x[1]
[1] "a"
> x[2]
[1] "b"
> x[1:4]
[1] "a" "b" "c" "c"
> 
> x[x>"a"]
[1] "b" "c" "c" "d"

> u<- x>"a"
> u
[1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE
#	shows which ones are true, basically substituting u for the x[x>"a"] formula

> x[u]
[1] "b" "c" "c" "d"
#	only includes those elements that are in u

> x
[1] "a" "b" "c" "c" "d" "a"
#	x remains unchanged


- - - - - - - - - - - - - - - - - - - -
Video 2-18 - Subsetting - Lists

> x<-list(foo=1:4, bar=0.6)
> x[1]
$foo
[1] 1 2 3 4

> x[[1]]
[1] 1 2 3 4


> x$bar
[1] 0.6
#	substitutes $ for [[]]

> x[["bar"]]
[1] 0.6
#	returns the same as above

> x["bar"]
$bar
[1] 0.6
#	[] always returns a list

- - - - 

> x<-list(foo=1:4, bar=0.6, baz="Hello")
> x[c(1,3)]
$foo
[1] 1 2 3 4

$baz
[1] "Hello"
#	returns first and 3 element (foo and baz)

- - - - 

> name <-"foo"
#	this assignes 'name' to equal 'foo'

> x[[name]] ## computed index for 'foo'
[1] 1 2 3 4
#	since name = foo, x[[name]] returns 'foo'

> x$name ## element 'name' doesnt exist
NULL

> x$foo
[1] 1 2 3 4


- - - - 

>  x <- list(a=list(10, 12, 14), b=c(3.14, 2.81))
> x[[c(1,3)]]
[1] 14
#	returns the 3rd element of first list (10, 12, 14)

> x[[1]][[3]]
[1] 14
#	returns the 3rd element of first list (10, 12, 14)


> x[[c(2,1)]]
[1] 3.14
#	returns the 1rd element of 2nd list (3.14, 2.81)


- - - - - - - - - - - - - - - - - - - -
Video 2-19 - Subsetting - Matrices

> x <- matrix(1:6,2,3)
#	creates a 2 (row) x3 (col) matrix with numbers 1-6

> x[1,2]
[1] 3
#	1st row, 2nd column

> x[2,1]
[1] 2
#	2nd row, 1st column

> x[1, ]
[1] 1 3 5

> x[,2]
[1] 3 4

- - - - 

> x <- matrix(1:6,2,3)

> x[1,2]
[1] 3
#	normally you just get back a 1-dimensional object - not a 1x1 matrix

> x[1,2,drop=FALSE]
     [,1]
[1,]    3
#	drop=FALSE creates a 2 dimension result (1x1 matrix)

- - - - 

> x <- matrix(1:6,2,3)
> x[1,]
[1] 1 3 5
#	this returns a vector with the first row (1, 3, 5,...)

> x[1,,drop=FALSE]
     [,1] [,2] [,3]
[1,]    1    3    5
#	since we didnt specify which character, it creates a 1x3 result

- - - - - - - - - - - - - - - - - - - -
Video 2-20 - Subsetting - Partial Matching

>  x<- list(aardvark=1:5)
#	assigns 'aardvark' to the list

> x$a
[1] 1 2 3 4 5
#	since 'a' doesnt exist, and because we used a $, it searches for the closest match (aadrvark) and returns that response.

> x[["a"]]
NULL
#	[["a"]] expects exact matching, does not do partial

> x[["a",exact=FALSE]]
[1] 1 2 3 4 5
#	exact=FALSE (turns off TRUE match) means use closest match, which in this case is 'aardvark'

- - - - - - - - - - - - - - - - - - - -
Video 2-21 - Subsetting - Removing

>  x<- c(1, 2, NA, 4, NA, 5)
#	3, 5th character = NA

> bad <- is.na(x)
#	assigns the NA element to 'bad'

> x[bad]
[1] NA NA
#	shows the elements assigned to 'bad'

> x[!bad]
[1] 1 2 4 5
#	"!" does the inverse, there for, returns 1,2,4,5

- - - - 

> x<- c(1, 2, NA, 4, NA, 5)
> y<-c("a", "b", NA, "d", NA, "f")
> good<-complete.cases(x,y)
> good
[1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE
#	TRUE = not missing in both X and Y
#	FALSE = missing in one or both (x or y)

> x[good]
[1] 1 2 4 5

> y[good]
[1] "a" "b" "d" "f"

- - - - - - - - - - - - - - - - - - - -
Video 2-22 - Vectorized Operations

> x<-matrix(1:4,2,2); y<-matrix(rep(10,4),2,2)
> x*y   ##element wise multiplication
     [,1] [,2]
[1,]   10   30
[2,]   20   40

> x/y
     [,1] [,2]
[1,]  0.1  0.3
[2,]  0.2  0.4

> x%*%y # true matrix multiplication
     [,1] [,2]
[1,]   40   40
[2,]   60   60
 
- - - - - - - - - - - - - - - - - - - -
Video 2-23 - Intro to Swirl

