YouTube Tutorials:
https://www.youtube.com/watch?v=Hdz7ru_sWy8&list=PLFAYD0dt5xCzTQHDhMPZwBoaAXWeVhZzg


Video 8

rep(5,10)	
#	Repeats 5, 10 times
[]	5 5 5 5 5 5 5 5 5 5

rep(1:4, 5)
#	repeats sequence 1, 2, 3, 4 - 5 times
[]	1 2 3 4 1 2 3 4 ...

rep(1:4, each = 3)
#	each = consecutive
[]	1 1 1 2 2 2 3 3 3 4 4 4 4

rep(1:4, each = 3, times = 2)
[]	1 1 1 2 2 2 3 3 3 4 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 4

rep(1:4,1:4)
[]	1 2 2 3 3 3 4 4 4 4

rep(1:4, c(4,1,8,2))
[]	1 1 1 1 2 3 3 3 3 3 3 3 3 4 4

- - - - - - - - - - - - - - -
Video 9:
> a <- runif(10)
# 	R uniform function
[] 	10 random numbers

> a <- a * 10
# 	multiplies a x 10 (basically moves decimal place over 2)

> a <- round(a)
#	replaced previous result with rounded result
[]	3 3 1 2 10 5 10 4 4 6 (example)

> names(a)
[]	NULL
# 	No names have been assigned yet

> names(a) <- c(1:10)
> a 
[]	1 2 3 4 5 6 7 8 9 10
	3 3 1 2 10 5 10 4 4 6

> names(a) <- c("one", "two", "three", ...)
> a 
[]	One	Two	Three	Four	Five 	(etc)
	3 	3 	1 	2 	10 	5 10 4 4 6

- - - - - - - - - - - - - - -
Video 10:
> x <- c(1,2,3,4,5)
[]	1 2 3 4 5

> x[2] <- NA
# 	Missing values are represented by NA
# 	to access the 'n'th element, use vectorname[n] to refer to that element 
# 	example: in vector x, x[1] refers to the 1st element
[]	1 NA 3 4 5

> is.na(x)
[]	FALSE TRUE FALSE FALSE FALSE 
#	is.na(x) gives a logical vector that has "TRUE" in place of missing value (NA)

> !is.na(x)
[]	TRUE FALSE TRUE TRUE TRUE 
#	! = inverse values

> x[!is.na(x)]
[]	1 3 4 5
#	only returns "TRUE" results

> na.omit(x)
#	Same thing using a built-in function 'omit'
[]	[1] 1 3 4 5
	attr(,"na.action")
	[1] 2
	attr(,"class")
	[1] "omit"

> x == NA
[]	NA NA NA NA NA
#	Since the 2nd element is an NA, one would expect a 'TRUE" in place of NA.

> x == "NA"
[]	FALSE NA FALSE FALSE FALSE
# 	Would exect FALSE TRUE FALSE...
# 	Always use is.na()

- - - - - - - - - - - - - - -
Video 11:
> x <- c(1:11)
> x
[1]	1 2 3 4 5 6 7 8 9 10 11

> min(x)
#	min = minimum value
[1]	1

> max(x)
#	max = maximum value
[1]	11 

> median(x)
#	median value
[1]	6

> x <- x[-c(4,5)]
#	 x[-c(n1,n2)] - this will drop the n1'th and n2'th from x
[1]	1 2 3 4 7 8 9 10 11

> which(x > 5)
[1]	5 6 7 8 9 10 11
#	included 5 and the the dropped elements (5, 6)

> x[which(x > 5)] -> y
> y
#	puts the elements greater than 5 into variable y
[1]	7 8 9 10 11

Another way would be to:
> x[x > 5] -> y
> y
[1]	7 8 9 10 11

> x > 5
[1]	FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE 
#	R retains onl those elements where TRUE appears

> x(whcih(x == min(x))]
#	Same rule here - R retains onl those elements where TRUE appears
[1]	1

> x[which(x>7) | (x2)]
#	| = or
#	& = and
[1]	1 7 8 9 10 11

- - - - - - - - - - - - - - -
Video 12:

> int.vec <- c(1:6)
> class(int.vec) 
[1]	"integer"

> int.vec
[1]	1 2 3 4 5 6

> as.numeric(int.vev)
[1]	1 2 3 4 5 6
#	as.numeric() coverts an integer to numeric class, though numeric and integer classes behave the same for most prarical purposes

> as.numeric(int.vev) -> int.vec
> class(int.vec)
[1]	"numeric"

> as.character(int.vev) -> int.vec
[1] "1" "2" "3" "4" "5" "6"

> class(int.vec)
[1]	"character"

> vec1 <- c("f" , 2)
> class(vec1)
[1]	"character"

> vec1
[1]	"f" "2"

#	All elements of a vector should be of the same datatype, or they will be converted as per priority

> vec2 <- c(TRUE,2)
> vec2
[1] 1 2

> class(vec2)
[1] "numeric"

> vec3 <- c(TRUE, "f")
> class(vec3)
[1] "character"

> vec3
[1] "TRUE" "f"

# PRIORITY: Character > Numeric > Integer > Logical

- - - - - - - - - - - - - - -
Video 13: Lists (a collection of objects of mixed datatypes / classes)

> list(vec1, vec2, vec3)
[[1]]
[1] "f" "2"

[[2]]
[1] 1 2

[[3]]
[1] "TRUE" "f"   


> list1 <- list(vec1, vec2, vec3)
> list1
[[1]]
[1] "f" "2"

[[2]]
[1] 1 2

[[3]]
[1] "TRUE" "f"  

> list1[[1]]
[1] "f" "2"
# 	List1[[1]] will give direct reference to 1st object of list1

> list1[[1]][1]
[1] "f"
#	allows direct access to the 1st character of the 1st list

> length(list1)
[1] 3

> names(list1)
NULL
#	we havent assigned any names yet.

> unlist(list1)
[1] "f"    "2"    "1"    "2"    "TRUE" "f"   
# 	to flatten the lsit, use the unlist command

> unlist(list1)[[6]]
[1] "f"
#	returns the x'th element of the list

- - - - - - - - - - - - - - -
Video 14: Set Operations - Part 1 

> a <-c(1:6)
> b <-c(5:10)
> 1 %in% a
[1] TRUE

#	1 %in% a checks if value 1 is present in a and returns a TRUE/FALSE
# 	Often used in IF-ELSE conditional statements

> 10 %in% a
[1] FALSE

> a %in% b
[1] FALSE FALSE FALSE FALSE  TRUE  TRUE
#	a %in% b checks if each element of a is present in b, 
#	and returns a logical vector of length 'a'
# 	[1] FALSE FALSE FALSE FALSE  TRUE  TRUE
#	FALSE = 1 is not present in B
#	FALSE = 2 is not present in B
#	FALSE = 3 is not present in B
#	TRUE = 4 is present in B
#	TRUE = 5 is present in B

> is.element(a,b)
[1] FALSE FALSE FALSE FALSE  TRUE  TRUE
#	Same result

>  sample(a)
[1] 3 1 5 2 6 4
#	sample(a) function is udes to 'sample' any vector 'a'
#	gives you a different sample everytime.

> set.seed(10)
#	set.seed(x) x = random number - to get consistent samples

> set.seed(10)
> sample(a)
[1] 4 2 5 3 1 6
> sample(a)
[1] 2 6 3 5 4 1
> set.seed(10)
> sample(a)
[1] 4 2 5 3 1 6
#	whenever you set the seed, you always get the same sample
